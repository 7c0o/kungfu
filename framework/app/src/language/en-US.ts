export default {
  keyword_input: 'keyword',
  empty_text: 'no data',
  success: 'success',
  error: 'error',
  add: 'add',
  set: 'set',
  operation_success: 'operation success',
  operation_failed: 'operation failed',
  location_error: 'current location error',
  instrument_error: 'instrument error',
  confirm: 'confirm',
  cancel: 'cancel',

  MakeOrderDashboard: 'Order Dashboard',
  FutureArbitrage: 'Future Arbitrage',
  OrderBook: 'Order Book',
  MarketData: 'Market Data',
  TradingTask: 'Trading Task',
  Strategy: 'Strategy',
  Md: 'Md',
  Td: 'Td',
  Trade: 'Trade',
  Order: 'Order',
  PosGlobal: 'Positon Global',
  Pos: 'Positon',

  baseConfig: {
    main_panel: 'HOME',
    control_center: 'Control',
  },

  tradingConfig: {
    un_known: 'Unknown',

    running: 'Running',
    stopping: 'Stopping',
    stopped: 'Stopped',
    launching: 'Launching',
    error: 'Errored',
    waiting_restart: 'Stopped',

    pending: 'Pending',
    Idle: 'Idle',
    dis_connected: 'Disconnected',
    connected: 'Connected',
    logged_in: 'LoggedIn',
    login_failed: 'LoginFailed',
    ready: 'Ready',

    system: 'System',
    daemon: 'Daemon',
    md: 'Md',
    td: 'Td',
    strategy: 'Strategy',

    open: 'Open',
    close: 'Close',
    close_today: 'CloseToday',
    close_yesterday: 'CloseYest',

    buy: 'Buy',
    sell: 'Sell',
    lock: 'Lock',
    unlock: 'Unlock',
    exec: 'Exec',
    drop: 'Drop',
    purchase: 'Purchase',
    redemption: 'Redemption',
    split: 'Split',
    merge: 'Merge',
    margin_trade: 'MarginTrade',
    short_sell: 'ShortSell',
    repay_margin: 'RepayMargin',
    repay_short: 'RepayShort',
    cash_repay_margin: 'CashRepayMargin',
    stock_repay_short: 'StockRepayShort',
    surplus_stock_transfer: 'SurplusStockTransfer',
    guarantee_stock_transfer: 'GuaranteeStockTransferIn',
    guarantee_stock_redeem: 'GuaranteeStockTransferOut',

    submitted: 'Submitted',
    cancelled: 'Cancelled',
    filled: 'Filled',
    partial_filled_not_active: 'PartialFilledNotActive',
    partial_filled_active: 'PartialFilledActive',
    lost: 'Lost',

    long: 'Long',
    short: 'Short',

    Limit: 'Limit',
    Market: 'Market',
    FakBest5: 'FakBest5',
    Forward_best: 'ForwardBest',
    Reverse_best: 'ReverseBest',
    Fak: 'Fak',
    Fok: 'Fok',

    speculation: 'Speculation',
    hedge: 'Hedge',
    arbitrage: 'Arbitrage',
    covered: 'Covered',

    any: 'Any',
    min: 'Min',
    all: 'All',

    by_amount: 'ByAmount',
    by_volume: 'ByVolume',

    IOC: 'IOC',
    GFD: 'GFD',
    GTC: 'GTC',

    stock: 'Stock',
    future: 'Future',
    bond: 'Bond',
    stock_option: '股票期权',
    fund: 'Fund',
    tech_stock: 'TeckStock',
    index: 'Index',
    repo: 'Repo',
    crypto: 'Crypto',
    crypto_future: 'CryptoFuture',
    kungfu_simu: 'KungfuSimu',

    SSE: 'SSE',
    SZE: 'SZE',
    BSE: 'BSE',
    SHFE: 'SHFE',
    DCE: 'DCE',
    CZCE: 'CZCE',
    CFFEX: 'CFFEX',
    INE: 'INE',

    SP: 'SP',
    SPC: 'SPC',
    SPD: 'SPD',
    IPS: 'IPS',

    master: 'master',
    ledger: 'ledger',
    cached: 'cached',
    archive: 'archive',

    place_order: 'Place Order',
    apart_order: 'Apart Order',
    reset_order: 'Reset',
    account: 'AccountId',
    instrument: 'Instrument',
    instrument_type: 'Instrument Type',
    volume: 'Volume',
    price: 'Price',
    protect_price: 'Protect Price',
    price_type: 'Price Type',
    side: 'Side',
    offset: 'Offset',
    limit_price: '限额',

    make_order_number: 'Order Number',
    no_empty: 'Order quantity cannot be empty',
    total_order_amount: 'Total Order Amount',
    every_volume: 'Every Volume',
  },

  orderConfig: {
    update_time: 'update_time',
    instrument_id: 'instrument_id',
    limit_price: 'limit_price',
    order_status: 'order_status',
    latency_system: 'latency_system(μs)',
    latency_network: 'latency_network(μs)',
    dest_uname: 'dest_uname',
    source_uname: 'source_uname',
    completed: 'completed',
    clinch: 'clinch',
    all: 'all',

    mean: 'mean',
    max: 'max',
    min: 'min',
    volume: 'volume',

    checkbox_text: 'Outstanding delegate',
    cancel_all: 'All cancellations',
    date_picker: 'Select a date',
    confirm_cancel_all: 'Confirm cancellation of all orders',
    entrust: 'Entrust',
    start: 'Please Start',
    trade_process: 'Trade Process',

    entrust_statistical: 'Entrust Statistical',
    statistical_desc: 'Real-time (latest 100 pieces of data)',
    entrust_statistical_number: 'Entrust Statistical Number',
    ntrust_statistical_price: 'Entrust Statistical Price',
    average_withdrawal_ratio:
      'Average withdrawal ratio (only partial withdrawal and total withdrawal of statistics Department)',
    average_system_latency: 'Average System Latency(μs)',
    min_system_latency: 'Min System Latency(μs)',
    max_system_latency: 'Max System Latency(μs)',
    average_network_latency: 'Average Network Latency(μs)',
    min_network_latency: 'Min Network Latency(μs)',
    max_network_latency: 'Max Network Latency(μs)',
  },

  tdConfig: {
    td_group: 'Td Group',
    account_name: 'account',
    account_ps: 'note',
    state_status: 'status',
    process_status: 'process',
    unrealized_pnl: 'unrealized_pnl',
    marked_value: 'marked_value',
    margin: 'margin',
    avail_money: 'avail_money',
    actions: 'actions',

    add_td: 'Add',
    add_group_placeholder: 'Add group',
  },

  mdConfig: {
    counter_name: 'counter_name',
    state_status: 'status',
    process_status: 'process',
    actions: 'actions',
    select_counter_api: 'Select a counter',
    select_trade_task: 'Select trade task',
    select_plugin_type: 'Select plugin type',

    add_md: 'Add',
    counter_plugin_inexistence: 'Counter plugin inexistence',
  },

  strategyConfig: {
    strategy: 'strategy',
    strategy_id: 'strategy_id',
    strategy_file: 'strategy_file',
    strategy_path: 'strategy_path',
    process_status: 'process',
    unrealized_pnl: 'unrealized_pnl',
    marked_value: 'marked_value',
    actions: 'actions',
    strategy_tip: 'Ensure that the strategy_id is unique',

    add_strategy: 'Add',
  },

  tradingTaskConfig: {
    task_id: 'task_id',
    process_status: 'process',
    args: 'arguments',
    actions: 'actions',

    add_task: 'Add',
    illegal_process_id: 'Not a legitimate trade task process_id',
    key_inexistence: 'The trade task plugin key does not exist',
    plugin_inexistence: 'The trade task plugin does not exist',
    configuration_inexistence:
      'The configuration item does not exist,please check',
    delete_task: 'Deleting a trade Task',
    delete_task_content:
      'all data, if the transaction task is running, will also stop the process and confirm deletion',
  },

  posGlobalConfig: {
    instrument_id: 'instrument_id',
    account_id_resolved: 'account_id_resolved',
    yesterday_volume: 'yesterday_volume',
    today_volume: 'today_volume',
    sum_volume: 'sum_volume',
    avg_open_price: 'avg_open_price',
    last_price: 'last_price',
    unrealized_pnl: 'unrealized_pnl',
  },

  marketDataConfig: {
    instrument_id: 'instrument_id',
    open_price: 'open_price',
    high_price: 'high_price',
    low_price: 'low_price',
    last_price: 'last_price',
    volume: 'volume',
    actions: 'actions',

    subscribe_btn: 'Subscribe',
    add_market: 'Add',
  },

  tradeConfig: {
    instrument: 'instrument',
    trade_time_resolved: 'trade_time',
    kf_time_resolved: 'kf_time',
    instrument_id: 'instrument_id',
    price: 'price',
    volume: 'volume',
    latency_trade: 'latency_trade(μs)',

    mean_price: 'Mean Price',
    min_price: 'Min Price',
    max_price: 'Max Price',

    statistical: 'Transaction Statistical',
    statistical_count: 'Statistics of transaction quantity',
    statistical_price: 'Transaction price statistics',
    statistical_desc: 'Real-time (latest 100 pieces of data)',
    average_trade_latency: 'Average transaction delay(μs)',
    max_trade_latency: 'Max transaction delay(μs)',
    min_trade_latency: 'Min transaction delay(μs)',
  },

  futureArbitrageConfig: {
    account_name: 'account_name',
    future_arbitrage_code: 'future_arbitrage_code',
    instrument_bug_A: 'instrument_bug_A',
    instrument_sell_A: 'instrument_sell_A',
    instrument_bug_B: 'instrument_bug_B',
    instrument_sell_B: 'instrument_sell_B',
    side: 'side',
    offset: 'offset',
    hedge_flag: 'hedge_flag',
    price_type: 'price_type',
    limit_price: 'limit_price A-B',
    volume: 'volume',

    place_order: 'Place Order',
    reset_order: 'Reset',
    only_corresponding: 'Can Only corresponding',
  },

  globalSettingConfig: {
    global_setting_title: 'Global Setting',
    system: 'System',
    log_level: 'Log Level',
    for_all_log: 'For all Log',

    porformance: 'Performance',
    open_rocket_model: 'Open Rocket Model',
    rocket_model_desc: 'Use CPU 100%, restart is required',
    pass_quote: 'Close Quote Listener',
    pass_quote_desc: 'Close Quote Listener',

    strategy: 'Strategy',
    use_local_python: 'Use Local Python',
    local_python_desc: 'Pip3 install kungfu*.whl, local python require',
    python_path: 'Select Local Python Path',
    python_path_desc:
      'local python path is required to be selected, and kungfu*.whl should be installed in this path',

    trade: 'Trade',
    sound: 'Sound',
    use_sound: 'Enable the system prompt sound',
    fat_finger_threshold: 'Fat Finger Threshold',
    set_fat_finger:
      'Set the threshold for triggering an fat finger(percentage)',
    close_threshold: 'Close Threshold',
    set_close_threshold:
      'Set the threshold for triggering an close(percentage)',

    code_editor: 'Editor',
    tab_space_type: 'Indentation Category',
    set_tab_space: 'Kungfu Editor Indentation Category',
    tab_space_size: 'Indentation Size',
    set_tab_space_size: 'Kungfu Editor Indentation Size (space)',

    comission: 'Comission',
    varieties: 'Varieties',
    add_comission: 'Add',
    exchange_id: 'Exchange ID',
    open: 'Open',
    close_today: 'Close Today',
    close_yesterday: 'Close Yesterday',
    min: 'Min',

    timing_rev_top: 'Timing Rev. Top',
    use_timing_rev_top: 'Enable Timing Rev. Top',
    timing_task_list: 'Timing Task List',
    add_timing: 'Add Timing',
    target_process: 'Target Process',
    manner: 'Manner',
    daily_time: 'Daily Time',

    master: 'master',
    start: 'start',
    stop: 'stop',
    restart: 'restart',
  },
};
